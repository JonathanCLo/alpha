'''
Description: Associates Mnemonics with Opcodes
'''

MNEM = dict()
#mnemonice            opc  function     instruction
MNEM["LDA"]     =   ( 8  , None  )      # Load Address
MNEM["LDAH"]    =   ( 9  , None  )      # Load Address High
MNEM["LDBU"]    =   ( 10 , None  )      # Load Zero-Extended byte from memory to register
MNEM["LDL"]     =   ( 40 , None  )      # Load Sign-Extended Longword
MNEM["LDWU"]    =   ( 12 , None  )      # Load Zero-Extended Word From Memory to Register
MNEM["STL"]     =   ( 44 , None  )      # Store Longword
MNEM["STW"]     =   ( 13 , None  )      # Store Word
MNEM["BEQ"]     =   ( 57 , None  )      # Branch if Register Equal to Zero
MNEM["BGE"]     =   ( 62 , None  )      # Branch if Regsiter Greater Than or Equal to Zero
MNEM["BGT"]     =   ( 63 , None  )      # Branch if Register Greater Than Zero
MNEM["BLBC"]    =   ( 56 , None  )      # Branch if Register Low Bit Clear
MNEM["BLBS"]    =   ( 60 , None  )      # Branch if Register Low Bit Set
MNEM["BLE"]     =   ( 59 , None  )      # Branch if Less Than Or Equal Zero
MNEM["BLT"]     =   ( 58 , None  )      # Branch if Less Than Zero
MNEM["BNE"]     =   ( 61 , None  )      # Branch if Not Equal Zero
MNEM["BR"]      =   ( 48 , None  )      # Unconditional Branch (GOTO)
MNEM["BSR"]     =   ( 52 , None  )      # Branch to Subroutine
MNEM["JMP"]     =   ( 26 , 0     )      # Jump 
MNEM["JSR"]     =   ( 26 , 1     )      # Jump to Subroutine
MNEM["RET"]     =   ( 26 , 2     )      # Return from Subroutine
MNEM["JSRC"]    =   ( 26 , 3     )      # Jump to Subroutine Return
MNEM["ADDL"]    =   ( 16 , 0     )      # Add Longword
MNEM["S4ADDL"]  =   ( 16 , 2     )      # Scaled Add by 4 Longword
MNEM["S8ADDL"]  =   ( 16 , 18    )      # Scaled Add by 8 Longword
MNEM["CLTZ"]    =   ( 28 , 50    )      # Count Leading Zero
MNEM["CTPOP"]   =   ( 28 , 48    )      # Count population
MNEM["CTTZ"]    =   ( 28 , 51    )      # Count trailing Zeros
MNEM["MULL"]    =   ( 19 , 0     )      # Multiply Longword
MNEM["SUBL"]    =   ( 16 , 9     )      # Subtract Longword
MNEM["S4SUBL"]  =   ( 16 , 11    )      # Scaled subtract by 4 longword
MNEM["S8SUBL"]  =   ( 16 , 27    )      # Scaled subtract by 8 longword
MNEM["AND"]     =   ( 17 , 0     )      # Logical Product
MNEM["BIC"]     =   ( 17 , 8     )      # Logical Product with Complement
MNEM["BIS"]     =   ( 17 , 32    )      # Logical Sum (OR)
MNEM["EQV"]     =   ( 17 , 72    )      # Logical Equivalence (XORNOT)
MNEM["ORNOT"]   =   ( 17 , 40    )      # Logical Sum with Complement
MNEM["XOR"]     =   ( 17 , 64    )      # Logical Difference (XOR)
MNEM["CMOVEQ"]  =   ( 17 , 36    )      # Move Integer if Register Equal to Zero
MNEM["CMOVGE"]  =   ( 17 , 70    )      # Move Integer if Register Greater than or Equal to Zero
MNEM["CMOVGT"]  =   ( 17 , 102   )      # Move Integer if Register Greater than Zero
MNEM["CMOVLBC"] =   ( 17 , 22    )      # Move Integer if Register Low Bit Clear
MNEM["CMOVLBS"] =   ( 17 , 20    )      # Move Integer if Register Low Bit Set
MNEM["CMOVLE"]  =   ( 17 , 100   )      # Move Integer if Register Less Than or Equal to Zero
MNEM["CMOVLT"]  =   ( 17 , 68    )      # Move Integer if Register Less Than Zero
MNEM["CMOVNE"]  =   ( 17 , 38    )      # Move Integer if Register Not Equal Zero
MNEM["SLL"]     =   ( 18 , 57    )      # Shift Left Logical
MNEM["SRA"]     =   ( 18 , 60    )      # Shift Right Arithmetic
MNEM["SRL"]     =   ( 18 , 52    )      # Shift Right Logical 
MNEM["CMPBGE"]  =   ( 16 , 15    )      # Compare Byte
MNEM["EXTWL"]   =   ( 18 , 22    )      # Extract Word Low
MNEM["EXTLL"]   =   ( 18 , 38    )      # Extract Longword Low
MNEM["EXTWH"]   =   ( 18 , 90    )      # Extract Word High
MNEM["EXTLH"]   =   ( 18 , 106   )      # Extract Longword High
MNEM["INSWL"]   =   ( 18 , 27    )      # Insert Word Low
MNEM["INSLL"]   =   ( 18 , 43    )      # Insert Longword Low
MNEM["INSWH"]   =   ( 18 , 87    )      # Insert Word High
MNEM["INSLH"]   =   ( 18 , 103   )      # Insert Longword High
MNEM["MSKWL"]   =   ( 18 , 18    )      # Mask Word Low
MNEM["MSKLL"]   =   ( 18 , 34    )      # Mask Longword Low
MNEM["MSKWH"]   =   ( 18 , 82    )      # Mask Word High
MNEM["MSKLH"]   =   ( 18 , 98    )      # Mark Lonword High
MNEM["SEXTW"]   =   ( 28 , 1     )      # Sign Extend Word
MNEM["RPCC"]    =   ( 24 , 49152 )      # Read Processor Cycle Counter
MNEM["PAL"]     =   ( 0  , None  )      # PALCode 
